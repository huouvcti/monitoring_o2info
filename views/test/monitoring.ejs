<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>o2 정보통신</title>


        <link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/sidebars/">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" />


        <!-- 폰트 -->
        <link href="http://fonts.googleapis.com/earlyaccess/notosanskr.css" rel="stylesheet">
        <link rel="stylesheet" href="../../public/stylesheets/style.css" />

        <!-- Bar css -->
        <link rel="stylesheet" href="../../public/stylesheets/menuBar.css" />
        <link rel="stylesheet" href="../../public/stylesheets/topBar.css" />

        <link rel="stylesheet" href="../../public/csv/monitoring.css" />


        <script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>

        <script src="https://code.highcharts.com/highcharts.js"></script>
        <script src="https://code.highcharts.com/modules/series-label.js"></script>
        <script src="https://code.highcharts.com/modules/exporting.js"></script>
        <script src="https://code.highcharts.com/modules/export-data.js"></script>
        <script src="https://code.highcharts.com/modules/accessibility.js"></script>

     </head>

    <body>

        <main class="d-flex flex-nowrap">

            <%-include('../lib/menuBar.ejs') %>

            <script>
                let menubar = document.getElementById("menuBar")
                menubar.children[0].children[0].className = "nav-link active";
            </script>

            <%-include('../lib/topBar.ejs') %>

            <script>
                let topBar_title = document.getElementById("menu_title")
                topBar_title.innerText = " 양식장 모니터링 화면"
            </script>

            
            
            <%
            let sensor_name = ['수온', '용존 산소 (mg/L)', 'pH', '염도', 'ORP', '탁도']
            let sensor_unit = ['°C', 'mg/L', ' ', ' ', ' ', ' ']

            let backgroundColor = ['red', 'green', 'blue', 'purple', 'brown', '#006']
            %>

            <div class="b-example-divider b-example-vr" id="board" style="position:absolute; width: 95%; right: 0;">

                <div id="content_wrap">
                    <h1></h1>
                    <div id="time_wrap">time</div>

                    <div id="grid_wrap">
                        <% for (let i=0; i<6; i++){ %>
                            <div class="monitoring_grid">
                                <div class="sensor_values_wrap">
                                    <div class="sensor_value_detail">
                                        <div class="sensor_value">
                                            <p>최고 임계치</p>
                                            <p><span class="sensor_high">3</span><span> <%=sensor_unit[i]%></span></p>
                                        </div>
                                        <div class="sensor_value">
                                            <p>실시간 수치</p>
                                            <p><span  class="sensor_now">-</span><span> <%=sensor_unit[i]%></span></p>
                                        </div>
                                        <div class="sensor_value">
                                            <p>최소 임계치</p>
                                            <p><span class="sensor_low">3</span><span> <%=sensor_unit[i]%></span></p>
                                        </div>
                                    </div>
                                    <div class="sensor_now_big">-</div>
                                </div>

                                <div class="sensor_name_wrap" style="background-color: <%=backgroundColor[i]%>">
                                    <p><%=sensor_name[i]%></p>
                                    <button onclick="graph_show(<%=i%>)">그래프</button>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>



            <div id="graph_back" onclick="graph_close()">
                
                <div id="graph_wrap">
                    <h2></h2>
                    <div id="graph_draw"></div>
                </div>
            </div>


            

            <%-include('../lib/bottomBar.ejs') %>

        </main> 

    </body>

    <script>
        let current_time = document.getElementById('time_wrap')

        let today = new Date();
        current_time.innerText = today.toLocaleString()
    </script>

    <script>
        const sensor_high = document.getElementsByClassName('sensor_high')
        const sensor_low = document.getElementsByClassName('sensor_low')
        const sensor_now = document.getElementsByClassName('sensor_now')
        const sensor_now_big = document.getElementsByClassName('sensor_now_big')

        const sensor_name = ['Tc', 'DO', 'pH', 'Sa', 'ORP', 'TUR']

        // 임계값 불러오기
        $.ajax({
            type:'GET',
            dataType:'json',
            url:`/api/sensor/set`,
            success : function(responseData) {
                let result = responseData.result;
                
                console.log(result)

                for(let i=0; i<sensor_name.length; i++){
                    sensor_high[i].innerText = result[sensor_name[i]+'_high']
                    sensor_low[i].innerText = result[sensor_name[i]+'_low']
                }
            },
            error : function(error) {
            }
        });
    </script>

    <script>
        const sensor_value = {
            Tc: [],
            DO: [],
            pH: [],
            Sa: [],
            ORP: [],
            TUR: [],
            date: []
        }

        const sensor_title = ['수온', 'DO (mg/L)', 'pH', '염도', 'ORP', 'TUR']
        const sensor_unit = [' C', ' mg/L', '', '', '', '']
        const sensor_color = ['', '', '', '', '', '']

        let select_index = 0;
    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io.connect( {
            transports: ['websocket']
        });

        $.ajax({
            type:'post',
            dataType:'json',
            url:`/api/user/user_key`,
            success : function(responseData) {
                let result = responseData.result;
    
                let user_key = result.user_key
                
                // join
                socket.emit('join', {room: user_key});
            },
            error : function(error) {
            }
        });

        socket.on("sensor_before", async (data) =>{
            for(let i=0; i<data.length; i++){

                await sensor_value.Tc.unshift((Math.round(data[i]['Tc'] * 100) / 100));
                await sensor_value.DO.unshift((Math.round(data[i]['DO'] * 100) / 100));
                await sensor_value.pH.unshift((Math.round(data[i]['pH'] * 100) / 100));
                await sensor_value.Sa.unshift((Math.round(data[i]['Sa'] * 100) / 100));
                await sensor_value.ORP.unshift((Math.round(data[i]['ORP'] * 100) / 100));
                await sensor_value.TUR.unshift((Math.round(data[i]['TUR'] * 100) / 100));
                await sensor_value.date.unshift(data[i]['date']);

                
            }

            console.log(sensor_value)
        })

        socket.on("sensor_update", async (data) =>{
            for(let i=0; i<sensor_name.length; i++){
                sensor_now[i].innerText = data[sensor_name[i]]

                sensor_now_big[i].innerText = data[sensor_name[i]]
            }

            let shift = chart.series[0].data.length >= 20

            chart.series[0].addPoint({
                y: Math.round(data[sensor_name[select_index]] * 100) / 100,
            }, true, shift=shift);

            sensor_value.date.push(String(data["date"]))
            chart.xAxis[0].setCategories(PH_date, false);
            chart.redraw()
            })
    </script>


    <script>
        /* highchart 그래프 설정  */
        let chart;

        const draw_highchart = (sensor_data, date, high, low, title, unit, color) => {
            chart = new Highcharts.chart('graph_draw', {
                chart: {
                    renderTo: 'graph_draw',
                    height: '470px'
                },
                title: {
                    margin: 100,
                    text: title
                },

                subtitle: {
                    text: ''
                },

                yAxis: {
                    title: {
                        text: ''
                    },

                    // 기준선
                    plotLines : [{ 
                        value : high,
                        color : 'red',
                        dashStyle : 'shortdot',
                        width : 2,
                        label : { 
                            text: `최고 임계치 ${high} ${unit}`, 
                            style : {color:'red'}
                        }
                    }, { 
                        value : low,
                        color : 'blue',
                        dashStyle : 'shortdot',
                        width : 2,
                        label : { 
                            text: `최저 임계치 ${low} ${unit}`, 
                            style : {color:'blue'}
                        }
                    }],
                    max: high+5,
                    min: low-5
                },

                xAxis:{
                    categories: date,
                    visible: false
                },

                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle'
                },

                tooltip:{
                    formatter: this.x,
                },
                credits: {
                    enabled: false
                },


                series: [{
                    name: title,
                    data: sensor_data,
                    tooltip: {
                        valueSuffix: unit
                    },
                    color: color,
                    marker: { enabled: true },
                }]
            });

            return chart
        }
    </script>



    <script>
        const graph_back = document.getElementById("graph_back")


        const graph_close = () => {
            graph_back.style.display = 'none';
        }

        const graph_show = (num) =>{
            select_index = num;
            graph_back.style.display = 'flex';

            draw_highchart(sensor_value[sensor_name[select_index]], sensor_value.date, parseFloat(sensor_high[select_index].innerText), parseFloat(sensor_low[select_index].innerText), sensor_title[select_index], sensor_unit[select_index], sensor_color[select_index])
        }

        
    </script>

    <script src="../../public/javascripts/menubar.js"></script>
</html>